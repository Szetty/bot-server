/*
 * Bot Server API
 *
 * This is a bot API to let bots battle
 *
 * API version: 1.0.0
 * Contact: szederjesiarnold@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

// Package web contains all the components necessary for HTTP communication
package web

import (
	"botServer/web/model"
	"encoding/json"
	"github.com/google/logger"
	"net/http"
	"strings"
)

// A PlayAPIController binds http requests to an api service and writes the service results to the http response
type PlayAPIController struct {
	service PlayAPIServicer
}

// NewPlayAPIController creates a default api controller
func NewPlayAPIController(s PlayAPIServicer) Router {
	return &PlayAPIController{service: s}
}

// Routes returns all of the api route for the PlayAPIController
func (c *PlayAPIController) Routes() Routes {
	return Routes{
		{
			"PlayPost",
			strings.ToUpper("Post"),
			"/play",
			c.PlayPost,
		},
	}
}

// PlayPost -
func (c *PlayAPIController) PlayPost(w http.ResponseWriter, r *http.Request) {
	playRequest := &model.PlayRequest{}
	if err := json.NewDecoder(r.Body).Decode(&playRequest); err != nil {
		errorResponse := &model.Error{Message: err.Error()}
		err = EncodeJSONResponse(errorResponse, http.StatusBadRequest, w)
		if err != nil {
			handleServerError(w, err)
		}
		return
	}

	result, err := c.service.PlayPost(*playRequest)
	if err != nil {
		message := err.Error()
		logger.Warning(message)
		errorResponse := &model.Error{Message: message}
		err = EncodeJSONResponse(errorResponse, http.StatusBadRequest, w)
		if err != nil {
			handleServerError(w, err)
		}
		return
	}

	err = EncodeJSONResponse(result, http.StatusOK, w)
	if err != nil {
		handleServerError(w, err)
	}
}
